const express = require('express');
const { graphqlHTTP } = require('express-graphql');
const { GraphQLObjectType, GraphQLID, GraphQLString, GraphQLList, GraphQLSchema } = require('graphql');
const app = express();
const PORT = 5000

let userList = [
    {id:'1', name:'Menaka', email:"menaka@gmail.com"},
    {id:'2', name:'Priyanka', email:"priyanka@gmail.com"},
    {id:'3', name:'Kirthika', email:"kirthika@gmail.com"},
];

const UserType = new GraphQLObjectType({
    name:'UserType',
    fields:()=>({
        id:{type:GraphQLID},
        name:{type:GraphQLString},
        email:{type:GraphQLString}
    })
})

const RootQuery = new GraphQLObjectType({
    name:'RootType',
    fields:{
        users:{
            type: new GraphQLList(UserType),
            resolve(){
                return userList;
            }
        },
        // run comment
        // {
        //     users{
        //       name
        //     }
        //   }
        // {
        //     user(id:"3"){
        //       name
        //     }
        //   }
        // mutation{
        //     deleteUser(id:"1"){
        //       name
        //     }
        //   }
        user:{
            type: UserType,
            args:{id:{type:GraphQLID}},
            resolve(parent,args){
                return userList.find((user)=>user.id === args.id)
            }
        }
    }
})
// mutation{
//     addUser(name:"Menaka", email:"menaka@gmail.com"){
//       name
//       email
//     }
//   }
// mutation{
//     updateUser(id:"2", name:"Surya", email:"surya@gmail.com"){
//       name,
//       email
//     }
//   }
const mutations = new GraphQLObjectType({
    name:"mutations",
    fields:{
        addUser:{
            type:UserType,
            args:{
                name:{type: GraphQLString},
                email:{type:GraphQLString}
            },
            resolve(parent,{name, email}){
                const newUser = {name,email,id:Date.now().toString()}
                userList.push(newUser)
                return newUser;
            }
        },
        updateUser: {
            type: UserType,
            args:{
                id:{type:GraphQLID},
                email:{type:GraphQLString},
                name:{type:GraphQLString}
            },
            resolve(parent,{id, name, email}){
                const user = userList.find((u)=>u.id===id);
                user.email = email;
                user.name = name;
                return user;
            }
        },
        deleteUser: {
            type: UserType,
            args:{
                id:{type:GraphQLID},
            },
            resolve(parent,{id}){
                const user = userList.find((u)=>u.id===id);
                userList = userList.filter((u)=>u.id!==id)
                return user;
            }
        }
    }
})

const schema = new GraphQLSchema({query:RootQuery, mutation:mutations})

app.use('/graphql',graphqlHTTP({schema:schema, graphiql:true}));
app.listen(PORT,()=>console.log(`server running in ${PORT}`));
